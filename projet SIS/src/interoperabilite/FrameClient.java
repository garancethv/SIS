package interoperabilite;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * FrameClient.java
 *
 * Created on 6 févr. 2009, 10:18:51
 */
import java.awt.CardLayout;
import java.awt.Color;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import library.interfaces.Action;
import library.interfaces.ClientHL7;
import library.interfaces.MessageInterface;
import library.interfaces.Patient;
import library.interfaces.PatientLocation;

/**
 *
 * @author Anthony CROUZET Polytech'Grenoble TIS3
 */
public class FrameClient extends javax.swing.JFrame {

    private Patient patient;
    private Action action;
    private char sex = 'X';
    private String card = "cardAdmettre";
    private int nbr;
    private final SimpleDateFormat formateur = new SimpleDateFormat("dd/MM/yyyy");

    /** Creates new form FrameClient */
    public FrameClient() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        panelCard = new javax.swing.JPanel();
        panelMessage = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        comboBoxADT = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        panelPatient = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        fieldNomPat = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        fieldPrenomPat = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        fieldDateNaissance = new javax.swing.JFormattedTextField();
        jLabel9 = new javax.swing.JLabel();
        comboBoxSexe = new javax.swing.JComboBox();
        comboBoxClass = new javax.swing.JComboBox();
        jLabel15 = new javax.swing.JLabel();
        panelConexion = new javax.swing.JPanel();
        panelPatient1 = new javax.swing.JPanel();
        jLabel12 = new javax.swing.JLabel();
        fieldHost = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        fieldPort = new javax.swing.JFormattedTextField();
        jPanel2 = new javax.swing.JPanel();
        jButton2 = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        labelFin = new javax.swing.JLabel();
        labelFin1 = new javax.swing.JLabel();
        labelFin2 = new javax.swing.JLabel();
        labelFin3 = new javax.swing.JLabel();
        labelFin4 = new javax.swing.JLabel();
        labelFin5 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new java.awt.GridBagLayout());

        panelCard.setLayout(new java.awt.CardLayout());

        panelMessage.setLayout(new java.awt.GridBagLayout());

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jButton1.setText("Admettre");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(161, Short.MAX_VALUE)
                .add(jButton1)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(jButton1)
                .addContainerGap())
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        panelMessage.add(jPanel1, gridBagConstraints);

        comboBoxADT.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Admission d’un patient hospitalisé", "Mutation d’un patient ", "Sortie hôpital d’un patient" }));
        comboBoxADT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxADTActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 0, 4, 0);
        panelMessage.add(comboBoxADT, gridBagConstraints);

        jLabel1.setText("Action :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panelMessage.add(jLabel1, gridBagConstraints);

        panelPatient.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        panelPatient.setLayout(new java.awt.GridBagLayout());

        jLabel2.setFont(new java.awt.Font("Lucida Grande", 1, 16)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Patient");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panelPatient.add(jLabel2, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 2, 0);
        panelPatient.add(fieldNomPat, gridBagConstraints);

        jLabel4.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jLabel4.setText("Nom :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        panelPatient.add(jLabel4, gridBagConstraints);

        jLabel5.setText("Prénom :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        panelPatient.add(jLabel5, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 2, 0);
        panelPatient.add(fieldPrenomPat, gridBagConstraints);

        jLabel6.setText("Date de naissance :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        panelPatient.add(jLabel6, gridBagConstraints);

        try {
            fieldDateNaissance.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        fieldDateNaissance.setToolTipText("dd/MM/yyyy");
        fieldDateNaissance.setMinimumSize(new java.awt.Dimension(68, 20));
        fieldDateNaissance.setPreferredSize(new java.awt.Dimension(68, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        panelPatient.add(fieldDateNaissance, gridBagConstraints);

        jLabel9.setText("Sexe :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        panelPatient.add(jLabel9, gridBagConstraints);

        comboBoxSexe.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Femme", "Homme", "Autre" }));
        comboBoxSexe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxSexeActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 2, 0);
        panelPatient.add(comboBoxSexe, gridBagConstraints);

        comboBoxClass.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Urgence", "Hospitalisé", "Externe", "Pré-admission", "Récurrent", "Obstétrique", "Compte commercial", "Non applicable", "Inconnu" }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 2, 0);
        panelPatient.add(comboBoxClass, gridBagConstraints);

        jLabel15.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jLabel15.setText("Catégorie :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        panelPatient.add(jLabel15, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panelMessage.add(panelPatient, gridBagConstraints);

        panelCard.add(panelMessage, "cardPat");

        panelConexion.setPreferredSize(new java.awt.Dimension(467, 557));
        panelConexion.setLayout(new java.awt.GridBagLayout());

        panelPatient1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        panelPatient1.setLayout(new java.awt.GridBagLayout());

        jLabel12.setFont(new java.awt.Font("Lucida Sans", 1, 16)); // NOI18N
        jLabel12.setText("Connexion");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panelPatient1.add(jLabel12, gridBagConstraints);

        fieldHost.setMinimumSize(new java.awt.Dimension(128, 20));
        fieldHost.setPreferredSize(new java.awt.Dimension(128, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 0, 4, 4);
        panelPatient1.add(fieldHost, gridBagConstraints);

        jLabel13.setText("Host :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panelPatient1.add(jLabel13, gridBagConstraints);

        jLabel14.setText("Port :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panelPatient1.add(jLabel14, gridBagConstraints);

        try {
            fieldPort.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        fieldPort.setMinimumSize(new java.awt.Dimension(48, 20));
        fieldPort.setPreferredSize(new java.awt.Dimension(48, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 0, 4, 4);
        panelPatient1.add(fieldPort, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 4, 5, 4);
        panelConexion.add(panelPatient1, gridBagConstraints);

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jButton2.setText("Connexion");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(jButton2)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(17, Short.MAX_VALUE)
                .add(jButton2)
                .addContainerGap())
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(5, 4, 5, 4);
        panelConexion.add(jPanel2, gridBagConstraints);

        jPanel5.setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel5.add(labelFin, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel5.add(labelFin1, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel5.add(labelFin2, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel5.add(labelFin3, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel5.add(labelFin4, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel5.add(labelFin5, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 4, 5, 4);
        panelConexion.add(jPanel5, gridBagConstraints);

        panelCard.add(panelConexion, "cardConnexion");

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        getContentPane().add(panelCard, gridBagConstraints);

        jLabel7.setFont(new java.awt.Font("Lucida Grande", 1, 24)); // NOI18N
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("Accueil CHU");

        org.jdesktop.layout.GroupLayout jPanel6Layout = new org.jdesktop.layout.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 422, Short.MAX_VALUE)
            .add(jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(jPanel6Layout.createSequentialGroup()
                    .add(0, 0, Short.MAX_VALUE)
                    .add(jLabel7, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 422, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(0, 0, Short.MAX_VALUE)))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 30, Short.MAX_VALUE)
            .add(jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(jPanel6Layout.createSequentialGroup()
                    .add(0, 0, Short.MAX_VALUE)
                    .add(jLabel7)
                    .add(0, 0, Short.MAX_VALUE)))
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        getContentPane().add(jPanel6, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if (this.champsPatOk()) {

            this.creePatient();

            this.setValPatient();

            //changer de panel
            java.awt.CardLayout c = (CardLayout) this.panelCard.getLayout();
            c.show(this.panelCard, "cardAction");
//            c = (CardLayout) this.panelSousAction.getLayout();
//            c.show(this.panelSousAction, card);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void comboBoxSexeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxSexeActionPerformed
        int i = this.comboBoxSexe.getSelectedIndex();
        switch (i) {
            case 0: {
                this.sex = 'U';
                break;
            }
            case 1: {
                this.sex = 'F';
                break;
            }
            case 2: {
                this.sex = 'M';
                break;
            }
            case 3: {
                this.sex = 'O';
                break;
            }
            case 4: {
                this.sex = 'A';
                break;
            }
        }
    }//GEN-LAST:event_comboBoxSexeActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        String host = this.fieldHost.getText();
        Integer port = Integer.parseInt(this.fieldPort.getText());
        ClientHL7 c = new ClientHL7();
        c.connexion(host, port);
        switch (this.nbr) {
            case 0: {
                c.admit(patient);
                break;
            }
            case 1: {
                c.transPat(patient);
                break;
            }
            case 2: {
                c.endPat(patient);
                break;
            }
        }
        MessageInterface messageAck = c.getMsg();
        this.labelFin1.setText("ID message : " + messageAck.getId());
        this.labelFin2.setText(messageAck.getAcknowledgmentCodeString());
        this.labelFin3.setText("ID Ack: " + messageAck.getIdAck());


    }//GEN-LAST:event_jButton2ActionPerformed

    private void comboBoxADTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxADTActionPerformed
//        String[] button = {"Admettre", "Transférer", "Décharger"};
//        String[] cads = {"cardAdmettre", "cardTrans", "cardDecharger"};
//        this.nbr = this.comboBoxADT.getSelectedIndex();
//        this.card = cads[nbr];
//        this.jButton1.setText(button[nbr]);
//        if (nbr == 0 || nbr == 1) {
//            this.enableTabLocAvt(false);
//            this.enableTabLoc(true);
//        }
//        if (nbr == 2) {
//            this.enableTabLocAvt(true);
//            this.enableTabLoc(false);
//        }
    }//GEN-LAST:event_comboBoxADTActionPerformed

    private boolean champsPatOk() {
        boolean r = true;
        this.initBackgroundField();

        if (this.fieldNomPat.getText().length() == 0) {
            r = false;
            this.fieldNomPat.setBackground(Color.RED);
        }
//        String s = this.fieldIdPat.getText();
//        int t = s.length();
//        if (t == 0) {
//            r = false;
//            this.fieldIdPat.setBackground(Color.RED);
//        }
//
//        for (int i = 0; i < t; i++) {
//            if (s.charAt(i) != '0' & s.charAt(i) != '1' & s.charAt(i) != '2' &
//                    s.charAt(i) != '3' & s.charAt(i) != '4' & s.charAt(i) != '5' &
//                    s.charAt(i) != '6' & s.charAt(i) != '7' & s.charAt(i) != '8' & s.charAt(i) != '9') {
//                r = false;
//                this.fieldIdPat.setBackground(Color.RED);
//            }
//        }
//
//        //Date Decharge
//        if (this.nbr == 2) {
//            String dateDechargeString = this.jFormattedTextFieldDateSortie.getText();
//            if (dateDechargeString.equals("  /  /    ")) {
//                r = false;
//                this.jFormattedTextFieldDateSortie.setBackground(Color.RED);
//            }
//        }
        return r;

    }

//    private void enableTabLocAvt(boolean b) {
//        this.jTextFieldBatiment1.setEnabled(b);
//        this.jLabelBatiment1.setEnabled(b);
//        this.jTextFieldChambre1.setEnabled(b);
//        this.jLabelChambre1.setEnabled(b);
//        this.jTextFieldEtage1.setEnabled(b);
//        this.jLabelEtage1.setEnabled(b);
//        this.jTextFieldLit1.setEnabled(b);
//        this.jLabelLit1.setEnabled(b);
//        this.jTextFieldPointOfCare1.setEnabled(b);
//        this.jLabelPointOfCare1.setEnabled(b);
//        this.jTextFieldStatus1.setEnabled(b);
//        this.jLabelStatus1.setEnabled(b);
//        this.jComboBoxTypeLoc1.setEnabled(b);
//        this.jLabelType1.setEnabled(b);
//    }
//
//    private void enableTabLoc(boolean b) {
//        this.jTextFieldBatiment.setEnabled(b);
//        this.jLabelBatiment.setEnabled(b);
//        this.jTextFieldChambre.setEnabled(b);
//        this.jLabelChambre.setEnabled(b);
//        this.jTextFieldEtage.setEnabled(b);
//        this.jLabelEtage.setEnabled(b);
//        this.jTextFieldLit.setEnabled(b);
//        this.jLabelLit.setEnabled(b);
//        this.jTextFieldPointOfCare.setEnabled(b);
//        this.jLabelPointOfCare.setEnabled(b);
//        this.jTextFieldStatus.setEnabled(b);
//        this.jLabelStatus.setEnabled(b);
//        this.jComboBoxTypeLoc.setEnabled(b);
//        this.jLabelType.setEnabled(b);
//    }

    private void creePatient() {
//        try {
//            //Nom de famille
//            String surname;
//            if (!(this.fieldNomPat.getText().length() < 0)) {
//                surname = this.fieldNomPat.getText();
//
//
////                Integer id = Integer.parseInt(this.fieldIdPat.getText());
//
//                int classePat = this.comboBoxClass.getSelectedIndex();
//                char classe = 'U';
//
//                switch (classePat) {
//                    case -1: {
//                        break;
//                    }
//                    case 0: {
//                        classe = 'E';
//                        break;
//                    }
//                    case 1: {
//                        classe = 'I';
//                        break;
//                    }
//                    case 2: {
//                        classe = 'O';
//                        break;
//                    }
//                    case 3: {
//                        classe = 'P';
//                        break;
//                    }
//                    case 4: {
//                        classe = 'R';
//                        break;
//                    }
//                    case 5: {
//                        classe = 'B';
//                        break;
//                    }
//                    case 6: {
//                        classe = 'C';
//                        break;
//                    }
//                    case 7: {
//                        classe = 'N';
//                        break;
//                    }
//                    case 8: {
//                        classe = 'U';
//                        break;
//                    }
//                }
//
////                this.patient = new Patient(id, surname, classe);
//            }
//        } catch (NumberFormatException e) {
//            System.out.println("Erreur d'identification patient : " + e.getMessage());
//        }
    }

    private void setValPatient() {
//        //Prénom de famille
//        this.patient.setFirstName(this.fieldPrenomPat.getText());
//
//
//        //Date de naissance
//        Date dateBirth = null;
//        String s = this.fieldDateNaissance.getText();
//        try {
//            if (!s.equals("  /  /    ")) {
//                dateBirth = formateur.parse(s);
//                this.patient.setBirth(dateBirth);
//            }
//        } catch (ParseException ex) {
//            Logger.getLogger(FrameClient.class.getName()).log(Level.SEVERE, null, ex);
//        }
//
//        //sexe
//        if (this.sex != 'X') {
//            this.patient.setSex(this.sex);
//        }
//
//        //Mort
//        switch (this.comboBoxMort.getSelectedIndex()) {
//            case 0: {
//                this.patient.setDeath(false);
//                break;
//            }
//            case 1: {
//                Date dateDeath = null;
//                String dateDeathString = this.fieldDateMort.getText();
//                try {
//                    if (!dateDeathString.equals("  /  /    ")) {
//                        dateDeath = formateur.parse(dateDeathString);
//                        this.patient.setDeath(dateDeath);
//                    } else {
//                        this.patient.setDeath(true);
//                    }
//                } catch (ParseException ex) {
//                    Logger.getLogger(FrameClient.class.getName()).log(Level.SEVERE, null, ex);
//                }
//
//                break;
//
//            }
//            case 2: {
//                this.patient.restDeath();
//                break;
//            }
//        }
//
//        //Date Decharge
//        Date dateDecharge = null;
//        String dateDechargeString = this.jFormattedTextFieldDateSortie.getText();
//        try {
//            if (!dateDechargeString.equals("  /  /    ")) {
//                dateDecharge = formateur.parse(dateDechargeString);
//                this.patient.setDateDicharge(dateDecharge);
//            }
//
//        } catch (ParseException ex) {
//            Logger.getLogger(FrameClient.class.getName()).log(Level.SEVERE, null, ex);
//        }
//
//    //Date Admission


    }

//    private PatientLocation setValPatLoc(PatientLocation patLocation) {
//
//        //Point of care
//        String field = this.jTextFieldPointOfCare.getText();
//        if (field != null) {
//            patLocation.setPointOfCare(field);
//        }
//
//        //Chambre
//        field = this.jTextFieldChambre.getText();
//        if (field != null) {
//            patLocation.setRoom(field);
//        }
//
//        //Lit
//        field = this.jTextFieldLit.getText();
//        if (field != null) {
//            patLocation.setBed(field);
//        }
//
//        //Facility
//
//        //Status
//        field = this.jTextFieldStatus.getText();
//        if (field != null) {
//            patLocation.setStatus(field);
//        }
//
//        //PersonLocationType
//        int nbrItem = this.jComboBoxTypeLoc.getSelectedIndex();
//        switch (nbrItem) {
//            case 1: {
//                patLocation.setPersonLocationType("C");
//                break;
//            }
//            case 2: {
//                patLocation.setPersonLocationType("D");
//                break;
//            }
//            case 3: {
//                patLocation.setPersonLocationType("H");
//                break;
//            }
//            case 4: {
//                patLocation.setPersonLocationType("N");
//                break;
//            }
//            case 5: {
//                patLocation.setPersonLocationType("O");
//                break;
//            }
//            case 6: {
//                patLocation.setPersonLocationType("P");
//                break;
//            }
//            case 7: {
//                patLocation.setPersonLocationType("S");
//                break;
//            }
//
//        }
//
//        //Batiment
//        field = this.jTextFieldBatiment.getText();
//        if (field != null) {
//            patLocation.setBuilding(field);
//        }
//
//        //Etage
//        field = this.jTextFieldEtage.getText();
//        if (field != null) {
//            patLocation.setFloor(field);
//        }
//
//        return patLocation;
//    }
//
//    private PatientLocation setValPatLocAvt(PatientLocation patLocation) {
//        //Point of care
//        String field = this.jTextFieldPointOfCare1.getText();
//        if (field != null) {
//            patLocation.setPointOfCare(field);
//        }
//
//        //Chambre
//        field = this.jTextFieldChambre1.getText();
//        if (field != null) {
//            patLocation.setRoom(field);
//        }
//
//        //Lit
//        field = this.jTextFieldLit1.getText();
//        if (field != null) {
//            patLocation.setBed(field);
//        }
//
//        //Facility
//
//        //Status
//        field = this.jTextFieldStatus1.getText();
//        if (field != null) {
//            patLocation.setStatus(field);
//        }
//
//        //PersonLocationType
//        int nbrItem = this.jComboBoxTypeLoc1.getSelectedIndex();
//        switch (nbrItem) {
//            case 1: {
//                patLocation.setPersonLocationType("C");
//                break;
//            }
//            case 2: {
//                patLocation.setPersonLocationType("D");
//                break;
//            }
//            case 3: {
//                patLocation.setPersonLocationType("H");
//                break;
//            }
//            case 4: {
//                patLocation.setPersonLocationType("N");
//                break;
//            }
//            case 5: {
//                patLocation.setPersonLocationType("O");
//                break;
//            }
//            case 6: {
//                patLocation.setPersonLocationType("P");
//                break;
//            }
//            case 7: {
//                patLocation.setPersonLocationType("S");
//                break;
//            }
//
//        }
//
//        //Batiment
//        field = this.jTextFieldBatiment1.getText();
//        if (field != null) {
//            patLocation.setBuilding(field);
//        }
//
//        //Etage
//        field = this.jTextFieldEtage1.getText();
//        if (field != null) {
//            patLocation.setFloor(field);
//        }
//
//        return patLocation;
//    }

    private void initBackgroundField() {
//        this.fieldIdPat.setBackground(Color.WHITE);
        this.fieldNomPat.setBackground(Color.WHITE);
//        this.jFormattedTextFieldDateSortie.setBackground(Color.WHITE);

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new FrameClient().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox comboBoxADT;
    private javax.swing.JComboBox comboBoxClass;
    private javax.swing.JComboBox comboBoxSexe;
    private javax.swing.JFormattedTextField fieldDateNaissance;
    private javax.swing.JTextField fieldHost;
    private javax.swing.JTextField fieldNomPat;
    private javax.swing.JFormattedTextField fieldPort;
    private javax.swing.JTextField fieldPrenomPat;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JLabel labelFin;
    private javax.swing.JLabel labelFin1;
    private javax.swing.JLabel labelFin2;
    private javax.swing.JLabel labelFin3;
    private javax.swing.JLabel labelFin4;
    private javax.swing.JLabel labelFin5;
    private javax.swing.JPanel panelCard;
    private javax.swing.JPanel panelConexion;
    private javax.swing.JPanel panelMessage;
    private javax.swing.JPanel panelPatient;
    private javax.swing.JPanel panelPatient1;
    // End of variables declaration//GEN-END:variables
}
